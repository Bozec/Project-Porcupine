Project Porcupine
http://towerdive.com/forum/community-project/

This is a Unity 3D 3.5 project.

== HOW TO CONTRIBUTE

1. Make sure you are running Unity 3D 3.5.

This is currently in beta pre-release and is available here:
	http://unity3d.com/unity/preview/

2. Use Git to clone the repository.

How to use Git is beyond the scope of this document.

Getting start with Git:
	http://progit.org/book/ch1-3.html

How to install Git on Windows:
	http://help.github.com/win-set-up-git/

The command to clone our repository:
	git clone git@github.com:TeamPorcupine/Project-Porcupine.git

3. Go into the Assets/Scenes folder of the project and double-click "_dummy-scene.scene".

This will launch Unity and cause it to create its /Library folder, which is not a part of the repository.

== ADDITIONAL TOOLS

Blender 2.6+ for 3D image modelling
	http://blender.org

Gimp, Paint.NET, or Photoshop for texture editing
	http://gimp.org
	http://www.getpaint.net/

	* Note that the texture format of choice is probably PNG, but Unity can work with layered PSD and TIFF
	files very well. Experimentation will have to show what workflow is best, especially for integration
	with Blender.

== GIT WORKFLOW

You should:

	- Use branches for virtually all work and push the branches to GitHub.
	- Do not push changes to origin/master
	- Only Pull Requests on GitHub should be used to merge changes into origin/master.

== UNITY AND VERSION CONTROL

Unity 3.5 will no longer explode when you attempt to use version control, but all non-script files are
still binary files, which means that if two people make a change to a file (including models, textures,
prefabs, and sounds) at the same time, person's changes will ultimately overwrite the other's.

This is to be expected, of course.  If two people change a 3D model or an image, there's really no
logical way to merge the changes.  Luckily, simultaneous modification of binary files should be 
relatively rare. 

The exception to this might be the scene file, since it becomes "dirty" if you modify any prefabs on it.  
However, since "_dummy-scene" contains nothing, it's always safe to override each other
here, or (preferrably) to regenerate your copy from HEAD. 

Our project should not have scenes heavily populated with prefabs, avoiding most issues. Instead, most
objects will be instantiated at run time.

Of course, script source code is text and should merge cleanly.

== BLENDER WORKFLOW

Note that by default, Blender keeps up to 2 backup versions of your models, which can add a bunch of
extra files under /Assets.  This doesn't interfere with Unity 3D, and is ignored by git, but you'll
probably want to clean them out from time to time.  You can also change this behaviour in Blender:

	Preferences -> File -> Save Versions:  Set to zero to disable.


== LICENSING

Still to be determined and is partially dependent on what 3rd-party assets (like textures) we want to 
take advantage of.  The program code will likely be GPL.
